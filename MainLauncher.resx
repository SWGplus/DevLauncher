<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AP8gAAH/AAAB/wAAAf8AAAP/AAAH/wAAD/8=
</value>
  </data>
</root>