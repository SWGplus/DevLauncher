using System;
using System.IO;
using System.Windows.Forms;

namespace Nuna
{
    public partial class TemplateGenerator : Form
    {
        public string dsrc = "C:/swg/dsrc/sku.0/sys.server/compiled/game/";
        public TemplateGenerator()
        {
            InitializeComponent();
            INIFile inif = new INIFile(Application.StartupPath + "/data/nuna.ini");
            if (inif.Read("TemplateGenerator", "version").Equals(""))

            {
                inif.Write("TemplateGenerator", "version", "v1.0");
            }
            var text = File.ReadAllText(Application.StartupPath + "/data/folders.txt");
            foreach (var folders in text)
            {
                comboBox3.Items.Add(folders).ToString();
                
            }

        }

        private void button1_Click(object sender, EventArgs e)
        {

            generateFile(dsrc + comboBox3.SelectedItem.ToString(), textBox6.Text, "shared_" + textBox6.Text);

        }

        private void generateFile(string baseFolder, string textFileServer, string textFileShared)
        {
            if (!File.Exists("data/server_tpf_template.tpf") && !File.Exists("data/shared_tpf_template.tpf"))
            {
                MessageBox.Show("Server and Shared template files are missing and Nuna cannot continue! Please re-download Nuna.", "Template Generator");
                this.Close();
            }
            System.IO.File.Copy("/data/server_tpf_template.tpf", Application.StartupPath + "/" + textFileServer, true);
            System.IO.File.Copy("/data/shared_tpf_template.tpf", Application.StartupPath + "/" + textFileShared, true);
            using (StreamReader reader = new StreamReader(Application.StartupPath + "/data/server_template.tpf"))
            {
                INIFile inif = new INIFile(Application.StartupPath + "/data/nuna.ini");
                int defaultVersion = 0;
                string allText = reader.ReadToEnd();
                string basedef = textBox2.Text;
                string classdefbase = comboBox1.SelectedItem.ToString();
                string classdef = comboBox2.SelectedItem.ToString();
                string classdefbaseVer = textBox1.Text;
                string classdefVer = textBox4.Text;
                string sharedTemplate = textBox3.Text;
                string script = textBox7.Text;
                string notes = "//Generated by Nuna on" + System.DateTime.Now;
                string author = inif.Read("TemplateGenerator", "author");
                string branch = inif.Read("Git", "Branch");
                if (branch == null)
                {
                    branch.Equals("roachie");
                }
                string header = "// Creator: " + author + "\n" + "//" + notes + "\n" + "// Intended Branch: " + branch + "\n" + "//";
                if (author == null)
                {
                    author = "Anonymous SWG Developer";
                }
                if (classdefbase == null)
                {
                    classdefbase = "tangible_object_template";
                }
                if (classdef == null)
                {
                    classdef = "object_template";
                }
                if (classdefVer == null)
                {
                    classdefVer.Equals(defaultVersion.ToString());
                }
                if (classdefbaseVer == null)
                {
                    classdefbaseVer.Equals(defaultVersion.ToString());
                }
                if (!basedef.Contains(".iff"))
                {
                    MessageBox.Show("Base definition must reference an existing base template file. File generated but will not compile.", "Error");
                }
                if (!sharedTemplate.Contains("shared_"))
                {
                    MessageBox.Show("Invalid shared template reference. Are you just you are pathing the file correctly", "Error");
                }
                if (script == null)
                {

                }
                allText.Replace("#BASEDEF", basedef);
                allText.Replace("#CLASSDEFBASE", classdefbase);
                allText.Replace("#CLASSDEF", classdef);
                allText.Replace("#CLASSDEFBASEVER", classdefbaseVer);
                allText.Replace("#CLASSDEFVER", classdefVer);
                allText.Replace("#SHARED_TEMPLATE", sharedTemplate);
                allText.Replace("#HEADER", header);
                allText.Replace("#BRANCH", branch);
                allText.Replace("#SCRIPT", script);

            }
            using (StreamReader reader = new StreamReader(Application.StartupPath + "/data/shared_template.tpf"))
            {
                INIFile inif = new INIFile(Application.StartupPath + "/data/nuna.ini");
                int defaultVersion = 0;
                string allText = reader.ReadToEnd();
                string basedef = textBox8.Text;
                string classdefbase = comboBox5.SelectedItem.ToString();
                string classdef = comboBox4.SelectedItem.ToString();
                string classdefbaseVer = textBox9.Text;
                string classdefVer = textBox5.Text;
                string appearanceFile = textBox3.Text;
                string script = textBox7.Text;
                string obj_n_file = "";
                string obj_d_file = "";
                string obj_n_idx = "";
                string obj_d_idx = "";
                string notes = "//Generated by Nuna on" + System.DateTime.Now;
                string author = inif.Read("TemplateGenerator", "author");
                string branch = inif.Read("Git", "Branch");
                if (branch == null)
                {
                    branch.Equals("roachie");
                }
                string header = "// Creator: " + author + "\n" + "//" + notes + "\n" + "// Intended Branch: " + branch + "\n" + "//";
                if (author == null)
                {
                    author = "Anonymous SWG Developer";
                }
                if (classdefbase == null)
                {
                    classdefbase = "tangible_object_template";
                }
                if (classdef == null)
                {
                    classdef = "object_template";
                }
                if (classdefVer == null)
                {
                    classdefVer.Equals(defaultVersion.ToString());
                }
                if (classdefbaseVer == null)
                {
                    classdefbaseVer.Equals(defaultVersion.ToString());
                }
                if (!basedef.Contains(".iff"))
                {
                    MessageBox.Show("Base definition must reference an existing base template file. File generated but will not compile.", "Error");
                }
                if (!appearanceFile.Contains("appearance/"))
                {
                    MessageBox.Show("Invalid appearance file. Please make sure your are using the following format: appearance/test.apt", "Error");
                }
                allText.Replace("#SHARED_BASE_OBJECT", basedef);
                allText.Replace("#SHARED_CLASS_TEMPLATE", classdefbase);
                allText.Replace("#SHARED_CLASS_TEMPLATE_BASE", classdef);
                allText.Replace("#SHARED_ClASS_TEMPLATE_VER", classdefbaseVer);
                allText.Replace("#SHARED_ClASS_TEMPLATE_BASE_VER", classdefVer);
                allText.Replace("#OBJECT_STRING_FILE", obj_n_file);
                allText.Replace("#OBJECT_STRING_FILE_IDX", obj_n_idx);
                allText.Replace("#OBJECT_STRING_FILE_DESC", obj_d_file);
                allText.Replace("#OBJECT_STRING_FILE_DESC_IDX", obj_d_idx);
                allText.Replace("#APPEARANCE_FILE", appearanceFile);
                allText.Replace("#HEADER", header);
                allText.Replace("#BRANCH", branch);

            }
        }
        private void button2_Click(object sender, EventArgs e)
        {
            var settings = new TPFSettings();
            settings.ShowDialog();
        }

        private void textBox8_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox15_TextChanged(object sender, EventArgs e)
        {

        }

        private void label14_Click(object sender, EventArgs e)
        {
            toolTip1.SetToolTip(label14, "See the .tdf files for the versions that you need.");
        }

        private void label15_Click(object sender, EventArgs e)
        {
            toolTip1.SetToolTip(label15, "See the .tdf files for the versions that you need.");
        }
    }
}
